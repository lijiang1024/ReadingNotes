
#user  nobody;

#开启进程数 <=CPU数
worker_processes  1;

#错误日志保存位置
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#进程号保存文件
#pid        logs/nginx.pid;

#每个进程最大连接数（最大连接=连接数x进程数）每个worker允许同时产生多少个链接，默认1024
events {
    use epoll;
    worker_connections  1024;
}

# 反向代理数据库
# stream {  
#     upstream backend {  
#         #hash $remote_addr consistent;  
#         server 58.48.109.84:3306;  #股份服务器01
#         #server FLT_IP_B:1433;  
#     }  
#     server {  
#         listen *:9000;  
#         proxy_pass backend;  
#     }  
# } 


http {
    #文件扩展名与文件类型映射表
    include       mime.types;

    #默认文件类型
    default_type  application/octet-stream;

    #日志文件输出格式 这个位置相于全局设置
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #请求日志保存位置
    #access_log  logs/access.log  main;

    #打开发送文件(启用内核复制模式，应该保持开启达到最快IO效率)
    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;

    #连接超时时间
    keepalive_timeout  30;

    #打开gzip压缩
    #gzip  on;

    server {
        #监听端口，默认是80端口
        listen       9000;
        #监听域名
        # server_name  localhost;
        server_name 58.48.109.84 nevtest.dfac.com.cn localhost;

        #charset koi8-r;
        charset utf-8;

        #nginx访问日志放在logs/host.access.log下，并且使用main格式（还可以自定义格式）
        #access_log  logs/host.access.log  main;

        #如果没有location更明确的匹配访问路径的话，访问请求都会被该location处理
        location / {
            root   html;
            index  index.html index.htm;
        }

        location ^~ /DPV2/UMSNodeService {
            add_header Cache-Control 'no-store';
            proxy_set_header  Host $host;
            proxy_redirect off;
            proxy_set_header  X-Real-IP  $remote_addr;
            proxy_set_header X-Forwarded-For $remote_addr;
            proxy_read_timeout 120; #连接成功后_等候后端服务器响应时间_其实已经进入后端的排队之中等候处理（也可以说是后端服务器处理请求的时间）
            proxy_send_timeout 120; #后端服务器数据回传时间_就是在规定时间之内后端服务器必须传完所有的数据
            proxy_connect_timeout 120; #后端服务器连接的超时时间_发起握手等候响应超时时间
            proxy_pass http://localhost:8087;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        #错误页面及其返回地址，错误码为500、502、503、504都会返回50.html错误页面
        error_page   500 502 503 504  /50x.html;

        #location后面是"="的话，说明是精确匹配
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
